<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on rbxmk</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/</link><description>Recent content in Overview on rbxmk</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2022 Anaminus</copyright><atom:link href="https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Instances</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/instances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/instances/</guid><description>A major difference between Roblox and rbxmk is what an instance represents. In Roblox, an instance is a live object that acts and reacts. In rbxmk, an instance represents data, and only data.
Consider the RBXL file format. Files of this format contain information used to reconstruct the instances that make up a place or model. Such files are static: they contain only data, but are difficult to manipulate in-place. Instances in rbxmk are like this, except that they are also interactive: the user can freely modify data and move it around.</description></item><item><title>Descriptors</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/descriptors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/descriptors/</guid><description>By default, rbxmk has no knowledge of the classes, members, and enums that are defined by Roblox. As such, instances can be of any class, properties can be of any type, and there are no constant enum values. By not explicitly requiring such information, rbxmk can remain relatively forward-compatible with future updates to Roblox. It also allows the user to construct values outside the constraints of the Roblox API.
However, most of the time, the user will be using rbxmk to manipulate values specifically for Roblox.</description></item><item><title>Value inheritance</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/inheritance/</guid><description>Certain symbol fields on [Instances][Instance] have an inheritance behavior.
Member Principal type Raw member Global field [sym.AttrConfig][Instance.sym.AttrConfig] [AttrConfig][AttrConfig] [sym.RawAttrConfig][Instance.sym.RawAttrConfig] [rbxmk.globalAttrConfig][rbxmk.globalAttrConfig] [sym.Desc][Instance.sym.Desc] [RootDesc][RootDesc] [sym.RawDesc][Instance.sym.RawDesc] [rbxmk.globalDesc][rbxmk.globalDesc] The following sections describe the aspects of this behavior for each member.
Indexing # The member has a principal type, which indicates the type of the main value assigned to the member.
Getting the member will return either a value of the principal type, or nil.</description></item><item><title>Explicit primitives</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/exprims/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/exprims/</guid><description>The properties of instances in Roblox have a number of different types. Many of these types can be expressed in Lua through constructors. Examples of such are CFrame, Vector3, UDim2, and so on. These types correspond to internal data types within the Roblox engine. The Lua representation of, say, a CFrame, is a userdata with accessible fields.
Some Roblox types are represented with a simple Lua primitive, such as a number or string.</description></item><item><title>File access limits</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/access-limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/overview/access-limits/</guid><description>To reduce the impact of malicious scripts, rbxmk limits a script&amp;rsquo;s access to the file system. An environment specifies a number of root directories. Only file paths within a root can be accessed. A root path itself cannot be accessed, except for moving files into ([fs.rename][fs.rename]), or getting the contents of ([fs.dir][fs.dir]).
The following directories are marked as roots:
The working directory ([path.expand] path.expand). The directory of the first running script file ([path.</description></item></channel></rss>