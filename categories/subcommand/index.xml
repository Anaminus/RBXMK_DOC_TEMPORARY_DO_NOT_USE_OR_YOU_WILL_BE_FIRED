<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Subcommand on rbxmk</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/categories/subcommand/</link><description>Recent content in Subcommand on rbxmk</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2022 Anaminus</copyright><atom:link href="https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/categories/subcommand/index.xml" rel="self" type="application/rss+xml"/><item><title>bash</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/bash/</guid><description>rbxmk completion bash
Generate the autocompletion script for the bash shell.
This script depends on the &amp;lsquo;bash-completion&amp;rsquo; package. If it is not installed already, you can install it via your OS&amp;rsquo;s package manager.
To load completions in your current shell session:
source &amp;lt;(rbxmk completion bash) To load completions for every new session, execute once:
Linux:
rbxmk completion bash &amp;gt; /etc/bash_completion.d/rbxmk macOS:
rbxmk completion bash &amp;gt; /usr/local/etc/bash_completion.d/rbxmk You will need to start a new shell for this setup to take effect.</description></item><item><title>fish</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/fish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/fish/</guid><description>rbxmk completion fish
Generate the autocompletion script for the fish shell.
To load completions in your current shell session:
rbxmk completion fish | source To load completions for every new session, execute once:
rbxmk completion fish &amp;gt; ~/.config/fish/completions/rbxmk.fish You will need to start a new shell for this setup to take effect.</description></item><item><title>fragments</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/fragments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/fragments/</guid><description>rbxmk dump fragments
The fragments dump format lists the fragment references made by the program.
A fragment is a chunk of text that documents some particular element. Internally, fragments are represented by a collection of files. A fragment reference is a combination of a file path, which drills into the file tree, and a &amp;ldquo;section&amp;rdquo; path, which drills into the sections of the referred file.
The following top-level directories are defined:</description></item><item><title>json</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/json/</guid><description>rbxmk dump json
The json dump format describes the API of the Lua environment in JSON format.
The top-level value is a JSON object. The Version field is a number that signals the structure of the JSON format, and will be present in all versions of the format.
Run rbxmk doc &amp;quot;Commands/dump/json:Structure&amp;quot; for a detailed description of the structure.
Flags # indent # --indent string
Default: &amp;quot;\t&amp;quot;
Specifies the spacing used to indent the JSON output.</description></item><item><title>plugin</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/plugin/</guid><description>rbxmk dump plugin FILE The plugin command enables the generation of a custom dump format. The command receives a file to be executed as a Lua script.
rbxmk dump plugin script.lua If - is given as the file, then the script will be read from standard input instead.
echo &amp;#39;print(&amp;#34;hello world!&amp;#34;)&amp;#39; | rbxmk dump plugin - The script receives as arguments a table and a function.
local dump, write = .</description></item><item><title>powershell</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/powershell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/powershell/</guid><description>rbxmk completion powershell
Generate the autocompletion script for powershell.
To load completions in your current shell session:
rbxmk completion powershell | Out-String | Invoke-Expression To load completions for every new session, add the output of the above command to your powershell profile.</description></item><item><title>selene</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/selene/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/selene/</guid><description>rbxmk dump selene
The selene dump format produces a TOML-formatted configuration file for the selene linter that lints the rbxmk Lua environment.</description></item><item><title>zsh</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/zsh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/zsh/</guid><description>rbxmk completion zsh
Generate the autocompletion script for the zsh shell.
If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:
echo &amp;#34;autoload -U compinit; compinit&amp;#34; &amp;gt;&amp;gt; ~/.zshrc To load completions for every new session, execute once:
Linux:
rbxmk completion zsh &amp;gt; &amp;#34;${fpath[1]}/_rbxmk&amp;#34; macOS:
rbxmk completion zsh &amp;gt; /usr/local/share/zsh/site-functions/_rbxmk You will need to start a new shell for this setup to take effect.</description></item></channel></rss>