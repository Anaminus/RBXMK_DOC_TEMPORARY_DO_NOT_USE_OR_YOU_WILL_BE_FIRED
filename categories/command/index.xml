<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Command on rbxmk</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/categories/command/</link><description>Recent content in Command on rbxmk</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2022 Anaminus</copyright><atom:link href="https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/categories/command/index.xml" rel="self" type="application/rss+xml"/><item><title>bash</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/bash/</guid><description>rbxmk completion bash
Generate the autocompletion script for the bash shell.
This script depends on the &amp;lsquo;bash-completion&amp;rsquo; package. If it is not installed already, you can install it via your OS&amp;rsquo;s package manager.
To load completions in your current shell session:
source &amp;lt;(rbxmk completion bash) To load completions for every new session, execute once:
Linux:
rbxmk completion bash &amp;gt; /etc/bash_completion.d/rbxmk macOS:
rbxmk completion bash &amp;gt; /usr/local/etc/bash_completion.d/rbxmk You will need to start a new shell for this setup to take effect.</description></item><item><title>completion</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/</guid><description>rbxmk completion
The completion command generates autocompletion scripts for the program. Each sub-command generates a script for a specific shell. See each sub-command&amp;rsquo;s help for details on how to use the generated script.
Flags # help # -h, --help
Default: false
Displays help for the command.
Subcommands # Subcommand Description bash Generate autocompletion script for bash. fish Generate autocompletion script for fish. powershell Generate autocompletion script for powershell. zsh Generate autocompletion script for zsh.</description></item><item><title>doc</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/doc/</guid><description>rbxmk doc REFERENCE The doc command displays documentation for a given API or topic.
Topics are stored in a tree, where each topic may have sub-topics. A &amp;ldquo;reference&amp;rdquo;, similar to a file path, can refer to a topic, or a section within a topic. The presence of a : separator causes the reference to begin drilling into the sections of the topic to the left of the separator. The topic portion of a reference is case-insensitive, while the section portion is case-sensitive.</description></item><item><title>download-asset</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/download-asset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/download-asset/</guid><description>rbxmk download-asset [ FLAGS ] --id INT [ PATH ] The download-asset command downloads an asset from the roblox website.
The --id flag, which is required, specifies the ID of the asset to download.
The first non-flag argument is the path to a file to write to. If not specified, then the file will be written to standard output.
Each cookie flag appends to the list of cookies that will be sent with the request.</description></item><item><title>dump</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/</guid><description>rbxmk dump FORMAT The dump command dumps the API of the rbxmk Lua environment in a specified format.
Flags # help # -h, --help
Default: false
Displays help for the command.
Subcommands # Subcommand Description fragments List of document fragment paths. json General JSON format. plugin Run a dump format plugin. selene Selene TOML format.</description></item><item><title>fish</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/fish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/fish/</guid><description>rbxmk completion fish
Generate the autocompletion script for the fish shell.
To load completions in your current shell session:
rbxmk completion fish | source To load completions for every new session, execute once:
rbxmk completion fish &amp;gt; ~/.config/fish/completions/rbxmk.fish You will need to start a new shell for this setup to take effect.
Flags # help # -h, --help
Default: false
Displays help for the command.
no-descriptions # --no-descriptions
Default: false</description></item><item><title>fragments</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/fragments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/fragments/</guid><description>rbxmk dump fragments
The fragments dump format lists the fragment references made by the program.
A fragment is a chunk of text that documents some particular element. Internally, fragments are represented by a collection of files. A fragment reference is a combination of a file path, which drills into the file tree, and a &amp;ldquo;section&amp;rdquo; path, which drills into the sections of the referred file.
The following top-level directories are defined:</description></item><item><title>help</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/help/</guid><description>rbxmk help [ COMMAND ] The help command displays help for a command, or general help if no command is given.
Flags # help # -h, --help
Default: false
Displays help for the command.</description></item><item><title>interactive</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/interactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/interactive/</guid><description>rbxmk interactive
Aliases: i
The interactive command enters interactive mode. Each prompt executes a chunk of Lua code.
If a prompt begins with =, then the comma-separated list of expressions that follow are evaluated and printed to standard output.
The environment contains the os.exit function. When called, interactive mode is terminated, and the program exits.
Within supported terminals, the following shortcuts are available:
Shortcut Description Ctrl+A, Home Move cursor to beginning of line.</description></item><item><title>json</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/json/</guid><description>rbxmk dump json
The json dump format describes the API of the Lua environment in JSON format.
The top-level value is a JSON object. The Version field is a number that signals the structure of the JSON format, and will be present in all versions of the format.
Run rbxmk doc &amp;quot;Commands/dump/json:Structure&amp;quot; for a detailed description of the structure.
Flags # help # -h, --help
Default: false
Displays help for the command.</description></item><item><title>plugin</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/plugin/</guid><description>rbxmk dump plugin FILE The plugin command enables the generation of a custom dump format. The command receives a file to be executed as a Lua script.
rbxmk dump plugin script.lua If - is given as the file, then the script will be read from standard input instead.
echo &amp;#39;print(&amp;#34;hello world!&amp;#34;)&amp;#39; | rbxmk dump plugin - The script receives as arguments a table and a function.
local dump, write = .</description></item><item><title>powershell</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/powershell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/powershell/</guid><description>rbxmk completion powershell
Generate the autocompletion script for powershell.
To load completions in your current shell session:
rbxmk completion powershell | Out-String | Invoke-Expression To load completions for every new session, add the output of the above command to your powershell profile.
Flags # help # -h, --help
Default: false
Displays help for the command.
no-descriptions # --no-descriptions
Default: false
Disables completion descriptions.</description></item><item><title>run</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/run/</guid><description>rbxmk run [ FLAGS ] FILE [ VALUE... ] The run command receives a file to be executed as a Lua script.
rbxmk run script.lua If - is given as the file, then the script will be read from standard input instead.
echo &amp;#39;print(&amp;#34;hello world!&amp;#34;)&amp;#39; | rbxmk run - The remaining arguments are Lua values to be passed to the file. Numbers, bools, and nil are parsed into their respective types in Lua, and any other value is interpreted as a string.</description></item><item><title>selene</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/selene/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/dump/selene/</guid><description>rbxmk dump selene
The selene dump format produces a TOML-formatted configuration file for the selene linter that lints the rbxmk Lua environment.
Flags # help # -h, --help
Default: false
Displays help for the command.</description></item><item><title>upload-asset</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/upload-asset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/upload-asset/</guid><description>rbxmk upload-asset [ FLAGS ] [ --id INT ] PATH The upload-asset command uploads an asset to the roblox website.
The --id flag specifies the ID of the asset to upload. If not specified, then a new asset will be created, and the ID of the asset will be returned.
The first non-flag argument is the path to a file to read from, which is required. If the path is &amp;ldquo;-&amp;rdquo;, then the file will be read from standard input.</description></item><item><title>version</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/version/</guid><description>rbxmk version
The version command displays the current version of rbxmk. The result is formatted according to semantic versioning .
Flags # format # -f, --format string
Default: &amp;quot;text&amp;quot;
Format of the version output. Available formats are &amp;ldquo;text&amp;rdquo;, &amp;ldquo;json&amp;rdquo;.
help # -h, --help
Default: false
Displays help for the command.
verbose # -v, --verbose
Default: 0
Increase verbosity level by 1 for each time the flag is specified. Default is level 0.</description></item><item><title>zsh</title><link>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/zsh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/RBXMK_DOC_TEMPORARY_DO_NOT_USE_OR_YOU_WILL_BE_FIRED/command/completion/zsh/</guid><description>rbxmk completion zsh
Generate the autocompletion script for the zsh shell.
If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:
echo &amp;#34;autoload -U compinit; compinit&amp;#34; &amp;gt;&amp;gt; ~/.zshrc To load completions for every new session, execute once:
Linux:
rbxmk completion zsh &amp;gt; &amp;#34;${fpath[1]}/_rbxmk&amp;#34; macOS:
rbxmk completion zsh &amp;gt; /usr/local/share/zsh/site-functions/_rbxmk You will need to start a new shell for this setup to take effect.</description></item></channel></rss>